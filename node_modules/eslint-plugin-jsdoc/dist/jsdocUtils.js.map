{"version":3,"sources":["../src/jsdocUtils.js"],"names":["getFunctionParameterNames","functionNode","map","params","param","has","name","left","type","argument","Error","getJsdocParameterNamesDeep","jsdoc","targetTagName","jsdocParameterNames","filter","tags","tag","getJsdocParameterNames","indexOf","getPreferredTagName","tagPreference","includes","values","preferredTagName","findKey","aliases","isValidTag","additionalTagNames","validTagNames","keys","concat","flatten","additionalTags","customTags","allTags","hasTag","targetTagLower","toLowerCase","some","doc"],"mappings":"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","file":"jsdocUtils.js","sourcesContent":["import _ from 'lodash';\nimport tagNames from './tagNames';\n\nconst getFunctionParameterNames = (functionNode : Object) : Array<string> => {\n  return _.map(functionNode.params, (param) => {\n    if (_.has(param, 'name')) {\n      return param.name;\n    }\n\n    if (_.has(param, 'left.name')) {\n      return param.left.name;\n    }\n\n    if (param.type === 'ObjectPattern') {\n      return '<ObjectPattern>';\n    }\n\n    if (param.type === 'RestElement') {\n      return param.argument.name;\n    }\n\n    throw new Error('Unsupported function signature format.');\n  });\n};\n\n/**\n * Gets all parameter names, including those that refer to a path, e.g. \"@param foo; @param foo.bar\".\n */\nconst getJsdocParameterNamesDeep = (jsdoc : Object, targetTagName : string) : Array<string> => {\n  let jsdocParameterNames;\n\n  jsdocParameterNames = _.filter(jsdoc.tags, {\n    tag: targetTagName\n  });\n\n  jsdocParameterNames = _.map(jsdocParameterNames, 'name');\n\n  return jsdocParameterNames;\n};\n\nconst getJsdocParameterNames = (jsdoc : Object, targetTagName : string) : Array<string> => {\n  let jsdocParameterNames;\n\n  jsdocParameterNames = getJsdocParameterNamesDeep(jsdoc, targetTagName);\n\n  jsdocParameterNames = _.filter(jsdocParameterNames, (name) => {\n    return name.indexOf('.') === -1;\n  });\n\n  return jsdocParameterNames;\n};\n\nconst getPreferredTagName = (name : string, tagPreference : Object = {}) : string => {\n  if (_.includes(_.values(tagPreference), name)) {\n    return name;\n  }\n\n  const preferredTagName = _.findKey(tagNames, (aliases) => {\n    return _.includes(aliases, name);\n  });\n\n  if (preferredTagName) {\n    return preferredTagName;\n  }\n\n  return _.has(tagPreference, name) ? tagPreference[name] : name;\n};\n\nconst isValidTag = (name : string, additionalTagNames : Object) : boolean => {\n  const validTagNames = _.keys(tagNames).concat(_.flatten(_.values(tagNames)));\n  const additionalTags = additionalTagNames.customTags || [];\n  const allTags = validTagNames.concat(additionalTags);\n\n  return _.includes(allTags, name);\n};\n\nconst hasTag = (jsdoc : Object, targetTagName : string) : boolean => {\n  const targetTagLower = targetTagName.toLowerCase();\n\n  return _.some(jsdoc.tags, (doc : Object) => {\n    return doc.tag.toLowerCase() === targetTagLower;\n  });\n};\n\nexport default {\n  getFunctionParameterNames,\n  getJsdocParameterNames,\n  getJsdocParameterNamesDeep,\n  getPreferredTagName,\n  hasTag,\n  isValidTag\n};\n"]}