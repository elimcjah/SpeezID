{"version":3,"sources":["../src/iterateJsdoc.js"],"names":["curryUtils","functionNode","jsdoc","tagNamePreference","additionalTagNames","utils","getFunctionParameterNames","getJsdocParameterNamesDeep","getPreferredTagName","getJsdocParameterNames","name","isValidTag","hasTag","iterator","context","sourceCode","getSourceCode","get","checkJsdoc","jsdocNode","getJSDocComment","value","parsers","PARSERS","parse_tag","parse_type","str","data","includes","tag","parse_name","parse_description","report","message","ArrowFunctionExpression","FunctionDeclaration","FunctionExpression"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,SAAbA,UAAa,CAACC,YAAD,EAAeC,KAAf,EAAsBC,iBAAtB,EAAyCC,kBAAzC,EAAgE;AACjF,MAAMC,QAAQ,EAAd;;AAEAA,QAAMC,yBAAN,GAAkC,YAAM;AACtC,WAAO,qBAAWA,yBAAX,CAAqCL,YAArC,CAAP;AACD,GAFD;;AAIAI,QAAME,0BAAN,GAAmC,YAAM;AACvC,WAAO,qBAAWA,0BAAX,CAAsCL,KAAtC,EAA6CG,MAAMG,mBAAN,CAA0B,OAA1B,CAA7C,CAAP;AACD,GAFD;;AAIAH,QAAMI,sBAAN,GAA+B,YAAM;AACnC,WAAO,qBAAWA,sBAAX,CAAkCP,KAAlC,EAAyCG,MAAMG,mBAAN,CAA0B,OAA1B,CAAzC,CAAP;AACD,GAFD;;AAIAH,QAAMG,mBAAN,GAA4B,UAACE,IAAD,EAAU;AACpC,WAAO,qBAAWF,mBAAX,CAA+BE,IAA/B,EAAqCP,iBAArC,CAAP;AACD,GAFD;;AAIAE,QAAMM,UAAN,GAAmB,UAACD,IAAD,EAAU;AAC3B,WAAO,qBAAWC,UAAX,CAAsBD,IAAtB,EAA4BN,kBAA5B,CAAP;AACD,GAFD;;AAIAC,QAAMO,MAAN,GAAe,UAACF,IAAD,EAAU;AACvB,WAAO,qBAAWE,MAAX,CAAkBV,KAAlB,EAAyBQ,IAAzB,CAAP;AACD,GAFD;;AAIA,SAAOL,KAAP;AACD,CA5BD;;kBA8Be,UAACQ,QAAD,EAAc;AAC3B,SAAO,UAACC,OAAD,EAAa;AAClB,QAAMC,aAAaD,QAAQE,aAAR,EAAnB;AACA,QAAMb,oBAAoB,iBAAEc,GAAF,CAAMH,OAAN,EAAe,kCAAf,KAAsD,EAAhF;AACA,QAAMV,qBAAqB,iBAAEa,GAAF,CAAMH,OAAN,EAAe,mCAAf,KAAuD,EAAlF;;AAEA,QAAMI,aAAa,SAAbA,UAAa,CAACjB,YAAD,EAAkB;AACnC,UAAMkB,YAAYJ,WAAWK,eAAX,CAA2BnB,YAA3B,CAAlB;;AAEA,UAAI,CAACkB,SAAL,EAAgB;AACd;AACD;;AAED,UAAMjB,QAAQ,6BAAc,OAAOiB,UAAUE,KAAjB,GAAyB,IAAvC,EAA6C;AACjD;AACRC,iBAAS,CACP,wBAAcC,OAAd,CAAsBC,SADf,EAEP,wBAAcD,OAAd,CAAsBE,UAFf,EAGP,UAACC,GAAD,EAAMC,IAAN,EAAe;AACb,cAAI,iBAAEC,QAAF,CAAW,CAAC,QAAD,EAAW,SAAX,CAAX,EAAkCD,KAAKE,GAAvC,CAAJ,EAAiD;AAC/C,mBAAO,IAAP;AACD;;AAED,iBAAO,wBAAcN,OAAd,CAAsBO,UAAtB,CAAiCJ,GAAjC,EAAsCC,IAAtC,CAAP;AACD,SATM,EAUP,wBAAcJ,OAAd,CAAsBQ,iBAVf;AAFgD,OAA7C,EAcX,CAdW,KAcL,EAdT;;AAgBA,UAAMC,SAAS,SAATA,MAAS,CAACC,OAAD,EAAa;AAC1BnB,gBAAQkB,MAAR,CAAeb,SAAf,EAA0Bc,OAA1B;AACD,OAFD;;AAIA,UAAM5B,QAAQL,WAAWC,YAAX,EAAyBC,KAAzB,EAAgCC,iBAAhC,EAAmDC,kBAAnD,CAAd;;AAEAS,eAAS;AACPC,eADO;AAEPb,oBAFO;AAGPC,aAHO;AAIPiB,iBAJO;AAKPa,cALO;AAMP3B;AANO,OAAT;AAQD,KArCD;;AAuCA,WAAO;AACL6B,+BAAyBhB,UADpB;AAELiB,2BAAqBjB,UAFhB;AAGLkB,0BAAoBlB;AAHf,KAAP;AAKD,GAjDD;AAkDD,C","file":"iterateJsdoc.js","sourcesContent":["import _ from 'lodash';\nimport commentParser from 'comment-parser';\nimport jsdocUtils from './jsdocUtils';\n\nconst curryUtils = (functionNode, jsdoc, tagNamePreference, additionalTagNames) => {\n  const utils = {};\n\n  utils.getFunctionParameterNames = () => {\n    return jsdocUtils.getFunctionParameterNames(functionNode);\n  };\n\n  utils.getJsdocParameterNamesDeep = () => {\n    return jsdocUtils.getJsdocParameterNamesDeep(jsdoc, utils.getPreferredTagName('param'));\n  };\n\n  utils.getJsdocParameterNames = () => {\n    return jsdocUtils.getJsdocParameterNames(jsdoc, utils.getPreferredTagName('param'));\n  };\n\n  utils.getPreferredTagName = (name) => {\n    return jsdocUtils.getPreferredTagName(name, tagNamePreference);\n  };\n\n  utils.isValidTag = (name) => {\n    return jsdocUtils.isValidTag(name, additionalTagNames);\n  };\n\n  utils.hasTag = (name) => {\n    return jsdocUtils.hasTag(jsdoc, name);\n  };\n\n  return utils;\n};\n\nexport default (iterator) => {\n  return (context) => {\n    const sourceCode = context.getSourceCode();\n    const tagNamePreference = _.get(context, 'settings.jsdoc.tagNamePreference') || {};\n    const additionalTagNames = _.get(context, 'settings.jsdoc.additionalTagNames') || {};\n\n    const checkJsdoc = (functionNode) => {\n      const jsdocNode = sourceCode.getJSDocComment(functionNode);\n\n      if (!jsdocNode) {\n        return;\n      }\n\n      const jsdoc = commentParser('/*' + jsdocNode.value + '*/', {\n                // @see https://github.com/yavorskiy/comment-parser/issues/21\n        parsers: [\n          commentParser.PARSERS.parse_tag,\n          commentParser.PARSERS.parse_type,\n          (str, data) => {\n            if (_.includes(['return', 'returns'], data.tag)) {\n              return null;\n            }\n\n            return commentParser.PARSERS.parse_name(str, data);\n          },\n          commentParser.PARSERS.parse_description\n        ]\n      })[0] || {};\n\n      const report = (message) => {\n        context.report(jsdocNode, message);\n      };\n\n      const utils = curryUtils(functionNode, jsdoc, tagNamePreference, additionalTagNames);\n\n      iterator({\n        context,\n        functionNode,\n        jsdoc,\n        jsdocNode,\n        report,\n        utils\n      });\n    };\n\n    return {\n      ArrowFunctionExpression: checkJsdoc,\n      FunctionDeclaration: checkJsdoc,\n      FunctionExpression: checkJsdoc\n    };\n  };\n};\n"]}