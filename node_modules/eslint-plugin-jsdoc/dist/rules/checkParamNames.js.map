{"version":3,"sources":["../../src/rules/checkParamNames.js"],"names":["validateParameterNames","targetTagName","functionParameterNames","jsdocParameterNames","report","some","jsdocParameterName","index","functionParameterName","join","validateParameterNamesDeep","lastRealParameter","isPropertyPath","includes","pathRootNodeName","slice","indexOf","utils","getFunctionParameterNames","getJsdocParameterNames","jsdocParameterNamesDeep","getJsdocParameterNamesDeep","getPreferredTagName","isError"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,yBAAyB,SAAzBA,sBAAyB,CAACC,aAAD,EAAyBC,sBAAzB,EAAiEC,mBAAjE,EAAsGC,MAAtG,EAA4H;AACzJ,SAAO,iBAAEC,IAAF,CAAOF,mBAAP,EAA4B,UAACG,kBAAD,EAAqBC,KAArB,EAA+B;AAChE,QAAMC,wBAAwBN,uBAAuBK,KAAvB,CAA9B;;AAEA,QAAI,CAACC,qBAAL,EAA4B;AAC1BJ,aAAO,MAAMH,aAAN,GAAsB,IAAtB,GAA6BK,kBAA7B,GAAkD,kDAAzD;;AAEA,aAAO,IAAP;AACD;;AAED,QAAIE,0BAA0B,iBAA9B,EAAiD;AAC/C,aAAO,KAAP;AACD;;AAED,QAAIA,0BAA0BF,kBAA9B,EAAkD;AAChDF,aAAO,eAAeH,aAAf,GAA+B,gBAA/B,GAAkDC,uBAAuBO,IAAvB,CAA4B,IAA5B,CAAlD,GAAsF,UAAtF,GAAmGN,oBAAoBM,IAApB,CAAyB,IAAzB,CAAnG,GAAoI,IAA3I;;AAEA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GApBM,CAAP;AAqBD,CAtBD;;AAwBA,IAAMC,6BAA6B,SAA7BA,0BAA6B,CAACT,aAAD,EAAyBE,mBAAzB,EAA8DC,MAA9D,EAAoF;AACrH,MAAIO,0BAAJ;;AAEA,SAAO,iBAAEN,IAAF,CAAOF,mBAAP,EAA4B,UAACG,kBAAD,EAAwB;AACzD,QAAMM,iBAAiB,iBAAEC,QAAF,CAAWP,kBAAX,EAA+B,GAA/B,CAAvB;;AAEA,QAAIM,cAAJ,EAAoB;AAClB,UAAI,CAACD,iBAAL,EAAwB;AACtBP,eAAO,MAAMH,aAAN,GAAsB,sBAAtB,GAA+CK,kBAA/C,GAAoE,uCAA3E;;AAEA,eAAO,IAAP;AACD;;AAED,UAAMQ,mBAAmBR,mBAAmBS,KAAnB,CAAyB,CAAzB,EAA4BT,mBAAmBU,OAAnB,CAA2B,GAA3B,CAA5B,CAAzB;;AAEA,UAAIF,qBAAqBH,iBAAzB,EAA4C;AAC1CP,eAAO,MAAMH,aAAN,GAAsB,sBAAtB,GAA+CK,kBAA/C,GAAoE,sBAApE,GAA6FQ,gBAA7F,GAAgH,mDAAhH,GAAsKH,iBAAtK,GAA0L,KAAjM;;AAEA,eAAO,IAAP;AACD;AACF,KAdD,MAcO;AACLA,0BAAoBL,kBAApB;AACD;;AAED,WAAO,KAAP;AACD,GAtBM,CAAP;AAuBD,CA1BD;;kBA4Be,4BAAa,gBAGtB;AAAA,MAFFF,MAEE,QAFFA,MAEE;AAAA,MADFa,KACE,QADFA,KACE;;AACJ,MAAMf,yBAAyBe,MAAMC,yBAAN,EAA/B;AACA,MAAMf,sBAAsBc,MAAME,sBAAN,EAA5B;AACA,MAAMC,0BAA0BH,MAAMI,0BAAN,EAAhC;AACA,MAAMpB,gBAAgBgB,MAAMK,mBAAN,CAA0B,OAA1B,CAAtB;AACA,MAAMC,UAAUvB,uBAAuBC,aAAvB,EAAsCC,sBAAtC,EAA8DC,mBAA9D,EAAmFC,MAAnF,CAAhB;;AAEA,MAAImB,OAAJ,EAAa;AACX;AACD;;AAEDb,6BAA2BT,aAA3B,EAA0CmB,uBAA1C,EAAmEhB,MAAnE;AACD,CAfc,C","file":"checkParamNames.js","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst validateParameterNames = (targetTagName : string, functionParameterNames : Array<string>, jsdocParameterNames : Array<string>, report : Function) => {\n  return _.some(jsdocParameterNames, (jsdocParameterName, index) => {\n    const functionParameterName = functionParameterNames[index];\n\n    if (!functionParameterName) {\n      report('@' + targetTagName + ' \"' + jsdocParameterName + '\" does not match an existing function parameter.');\n\n      return true;\n    }\n\n    if (functionParameterName === '<ObjectPattern>') {\n      return false;\n    }\n\n    if (functionParameterName !== jsdocParameterName) {\n      report('Expected @' + targetTagName + ' names to be \"' + functionParameterNames.join(', ') + '\". Got \"' + jsdocParameterNames.join(', ') + '\".');\n\n      return true;\n    }\n\n    return false;\n  });\n};\n\nconst validateParameterNamesDeep = (targetTagName : string, jsdocParameterNames : Array<string>, report : Function) => {\n  let lastRealParameter;\n\n  return _.some(jsdocParameterNames, (jsdocParameterName) => {\n    const isPropertyPath = _.includes(jsdocParameterName, '.');\n\n    if (isPropertyPath) {\n      if (!lastRealParameter) {\n        report('@' + targetTagName + ' path declaration (\"' + jsdocParameterName + '\") appears before any real parameter.');\n\n        return true;\n      }\n\n      const pathRootNodeName = jsdocParameterName.slice(0, jsdocParameterName.indexOf('.'));\n\n      if (pathRootNodeName !== lastRealParameter) {\n        report('@' + targetTagName + ' path declaration (\"' + jsdocParameterName + '\") root node name (\"' + pathRootNodeName + '\") does not match previous real parameter name (\"' + lastRealParameter + '\").');\n\n        return true;\n      }\n    } else {\n      lastRealParameter = jsdocParameterName;\n    }\n\n    return false;\n  });\n};\n\nexport default iterateJsdoc(({\n    report,\n    utils\n}) => {\n  const functionParameterNames = utils.getFunctionParameterNames();\n  const jsdocParameterNames = utils.getJsdocParameterNames();\n  const jsdocParameterNamesDeep = utils.getJsdocParameterNamesDeep();\n  const targetTagName = utils.getPreferredTagName('param');\n  const isError = validateParameterNames(targetTagName, functionParameterNames, jsdocParameterNames, report);\n\n  if (isError) {\n    return;\n  }\n\n  validateParameterNamesDeep(targetTagName, jsdocParameterNamesDeep, report);\n});\n"]}