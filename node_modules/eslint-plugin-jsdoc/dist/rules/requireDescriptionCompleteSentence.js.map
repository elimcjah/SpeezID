{"version":3,"sources":["../../src/rules/requireDescriptionCompleteSentence.js"],"names":["extractParagraphs","text","split","isNewLinePrecededByAPeriod","lastLineEndsSentence","lines","some","line","isBoolean","test","validateDescription","description","report","paragraphs","paragraph","index","jsdoc","tags","filter","tag","includes","trimStart"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,oBAAoB,SAApBA,iBAAoB,CAACC,IAAD,EAAU;AAClC,SAAOA,KAAKC,KAAL,CAAW,MAAX,CAAP;AACD,CAFD;;AAIA,IAAMC,6BAA6B,SAA7BA,0BAA6B,CAACF,IAAD,EAAU;AAC3C,MAAIG,6BAAJ;;AAEA,MAAMC,QAAQJ,KAAKC,KAAL,CAAW,IAAX,CAAd;;AAEA,SAAO,CAAC,iBAAEI,IAAF,CAAOD,KAAP,EAAc,UAACE,IAAD,EAAU;AAC9B,QAAI,iBAAEC,SAAF,CAAYJ,oBAAZ,KAAqC,CAACA,oBAAtC,IAA8D,SAASK,IAAT,CAAcF,IAAd,CAAlE,EAAuF;AACrF,aAAO,IAAP;AACD;;AAEDH,2BAAuB,MAAMK,IAAN,CAAWF,IAAX,CAAvB;;AAEA,WAAO,KAAP;AACD,GARO,CAAR;AASD,CAdD;;AAgBA,IAAMG,sBAAsB,SAAtBA,mBAAsB,CAACC,WAAD,EAAcC,MAAd,EAAyB;AACnD,MAAI,CAACD,WAAL,EAAkB;AAChB,WAAO,KAAP;AACD;;AAED,MAAME,aAAab,kBAAkBW,WAAlB,CAAnB;;AAEA,SAAO,iBAAEL,IAAF,CAAOO,UAAP,EAAmB,UAACC,SAAD,EAAYC,KAAZ,EAAsB;AAC9C,QAAI,CAAC,SAASN,IAAT,CAAcK,SAAd,CAAL,EAA+B;AAC7B,UAAIC,UAAU,CAAd,EAAiB;AACfH,eAAO,qDAAP;AACD,OAFD,MAEO;AACLA,eAAO,mDAAP;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAI,CAAC,MAAMH,IAAN,CAAWK,SAAX,CAAL,EAA4B;AAC1BF,aAAO,kCAAP;;AAEA,aAAO,IAAP;AACD;;AAED,QAAI,CAACT,2BAA2BW,SAA3B,CAAL,EAA4C;AAC1CF,aAAO,sGAAP;;AAEA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GAxBM,CAAP;AAyBD,CAhCD;;kBAkCe,4BAAa,gBAGtB;AAAA,MAFJI,KAEI,QAFJA,KAEI;AAAA,MADJJ,MACI,QADJA,MACI;;AACJ,MAAIF,oBAAoBM,MAAML,WAA1B,EAAuCC,MAAvC,CAAJ,EAAoD;AAClD;AACD;;AAED,MAAMK,OAAO,iBAAEC,MAAF,CAASF,MAAMC,IAAf,EAAqB,UAACE,GAAD,EAAS;AACzC,WAAO,iBAAEC,QAAF,CAAW,CAAC,OAAD,EAAU,SAAV,CAAX,EAAiCD,IAAIA,GAArC,CAAP;AACD,GAFY,CAAb;;AAIA,mBAAEb,IAAF,CAAOW,IAAP,EAAa,UAACE,GAAD,EAAS;AACpB,QAAMR,cAAc,iBAAEU,SAAF,CAAYF,IAAIR,WAAhB,EAA6B,IAA7B,CAApB;;AAEA,WAAOD,oBAAoBC,WAApB,EAAiCC,MAAjC,CAAP;AACD,GAJD;AAKD,CAjBc,C","file":"requireDescriptionCompleteSentence.js","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst extractParagraphs = (text) => {\n  return text.split(/\\n\\n/);\n};\n\nconst isNewLinePrecededByAPeriod = (text) => {\n  let lastLineEndsSentence;\n\n  const lines = text.split('\\n');\n\n  return !_.some(lines, (line) => {\n    if (_.isBoolean(lastLineEndsSentence) && !lastLineEndsSentence && /^[A-Z]/.test(line)) {\n      return true;\n    }\n\n    lastLineEndsSentence = /\\.$/.test(line);\n\n    return false;\n  });\n};\n\nconst validateDescription = (description, report) => {\n  if (!description) {\n    return false;\n  }\n\n  const paragraphs = extractParagraphs(description);\n\n  return _.some(paragraphs, (paragraph, index) => {\n    if (!/^[A-Z]/.test(paragraph)) {\n      if (index === 0) {\n        report('Description must start with an uppercase character.');\n      } else {\n        report('Paragraph must start with an uppercase character.');\n      }\n\n      return true;\n    }\n\n    if (!/\\.$/.test(paragraph)) {\n      report('Sentence must end with a period.');\n\n      return true;\n    }\n\n    if (!isNewLinePrecededByAPeriod(paragraph)) {\n      report('A line of text is started with an uppercase character, but preceding line does not end the sentence.');\n\n      return true;\n    }\n\n    return false;\n  });\n};\n\nexport default iterateJsdoc(({\n  jsdoc,\n  report\n}) => {\n  if (validateDescription(jsdoc.description, report)) {\n    return;\n  }\n\n  const tags = _.filter(jsdoc.tags, (tag) => {\n    return _.includes(['param', 'returns'], tag.tag);\n  });\n\n  _.some(tags, (tag) => {\n    const description = _.trimStart(tag.description, '- ');\n\n    return validateDescription(description, report);\n  });\n});\n"]}