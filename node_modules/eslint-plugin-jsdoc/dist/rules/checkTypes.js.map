{"version":3,"sources":["../../src/rules/checkTypes.js"],"names":["targetTags","targetTagAliases","concat","strictNativeTypes","jsdoc","report","jsdocTags","filter","tags","tag","includes","forEach","jsdocTag","some","strictNativeType","toLowerCase","type","name"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAIA,aAAa,CACf,OADe,EAEf,UAFe,EAGf,MAHe,EAIf,QAJe,EAKf,QALe,EAMf,WANe,EAOf,OAPe,EAQf,UARe,EASf,SATe,EAUf,QAVe,EAWf,MAXe,EAYf,SAZe,CAAjB;;AAeA,IAAMC,mBAAmB,CACvB,aADuB,EAEvB,OAFuB,EAGvB,KAHuB,EAIvB,KAJuB,EAKvB,UALuB,EAMvB,MANuB,EAOvB,QAPuB,EAQvB,WARuB,CAAzB;;AAWAD,aAAaA,WAAWE,MAAX,CAAkBD,gBAAlB,CAAb;;AAEA,IAAME,oBAAoB,CACxB,SADwB,EAExB,QAFwB,EAGxB,QAHwB,EAIxB,OAJwB,EAKxB,QALwB,EAMxB,QANwB,EAOxB,MAPwB,EAQxB,UARwB,CAA1B;;kBAWe,4BAAa,gBAGtB;AAAA,MAFJC,KAEI,QAFJA,KAEI;AAAA,MADJC,MACI,QADJA,MACI;;AACJ,MAAMC,YAAY,iBAAEC,MAAF,CAASH,MAAMI,IAAf,EAAqB,UAACC,GAAD,EAAS;AAC9C,WAAO,iBAAEC,QAAF,CAAWV,UAAX,EAAuBS,IAAIA,GAA3B,CAAP;AACD,GAFiB,CAAlB;;AAIA,mBAAEE,OAAF,CAAUL,SAAV,EAAqB,UAACM,QAAD,EAAc;AACjC,qBAAEC,IAAF,CAAOV,iBAAP,EAA0B,UAACW,gBAAD,EAAsB;AAC9C,UAAIA,iBAAiBC,WAAjB,OAAmCH,SAASI,IAAT,CAAcD,WAAd,EAAnC,IAAkED,qBAAqBF,SAASI,IAApG,EAA0G;AACxGX,eAAO,oBAAoBO,SAASH,GAA7B,GAAmC,IAAnC,GAA0CG,SAASK,IAAnD,GAA0D,UAA1D,GAAuEL,SAASI,IAAhF,GAAuF,IAA9F;;AAEA,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD,KARD;AASD,GAVD;AAWD,CAnBc,C","file":"checkTypes.js","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from './../iterateJsdoc';\n\nlet targetTags = [\n  'class',\n  'constant',\n  'enum',\n  'member',\n  'module',\n  'namespace',\n  'param',\n  'property',\n  'returns',\n  'throws',\n  'type',\n  'typedef'\n];\n\nconst targetTagAliases = [\n  'constructor',\n  'const',\n  'var',\n  'arg',\n  'argument',\n  'prop',\n  'return',\n  'exception'\n];\n\ntargetTags = targetTags.concat(targetTagAliases);\n\nconst strictNativeTypes = [\n  'boolean',\n  'number',\n  'string',\n  'Array',\n  'Object',\n  'RegExp',\n  'Date',\n  'Function'\n];\n\nexport default iterateJsdoc(({\n  jsdoc,\n  report\n}) => {\n  const jsdocTags = _.filter(jsdoc.tags, (tag) => {\n    return _.includes(targetTags, tag.tag);\n  });\n\n  _.forEach(jsdocTags, (jsdocTag) => {\n    _.some(strictNativeTypes, (strictNativeType) => {\n      if (strictNativeType.toLowerCase() === jsdocTag.type.toLowerCase() && strictNativeType !== jsdocTag.type) {\n        report('Invalid JSDoc @' + jsdocTag.tag + ' \"' + jsdocTag.name + '\" type \"' + jsdocTag.type + '\".');\n\n        return true;\n      }\n\n      return false;\n    });\n  });\n});\n"]}